{
	"cpp sample code": {
		"prefix": "cppsample",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;\n",
			"#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);",
			"#define ll long long \n",
			"int main(){\n",
			"    $1\n",
			"    return 0;",
			"}"
		],
		"description": "cpp sample code"
	},
	"cppcoding": {
		"prefix": "cppcoding",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;\n",
			"#define fast ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);",
			"#define ll long long",
			"#define uli unsigned long int\n",
			"class Util {",
			"  public:",
			"    template <typename T> void printSet(const set<T> &s) {",
			"        for (const auto &element : s) {",
			"            cout << element << \" \";",
			"        }",
			"        cout << endl;",
			"    }",
			"    template <typename T> void printVector(const vector<T> &v) {",
			"        for (const auto &element : v) {",
			"            cout << element << \" \";",
			"        }",
			"        cout << endl;",
			"    }",
			"    template <typename T> void print2DVector(const vector<vector<T>> &vec) {",
			"        for (const auto &row : vec) {",
			"            for (const auto &element : row) {",
			"                cout << element << \" \";",
			"            }",
			"            cout << endl;",
			"        }",
			"    }",
			"};\n",
			"Util util;\n",
			"class Solution {",
			"  public:",
			"    int solve(vector<int> &nums) {",
			"        int n = nums.size();",
			"        int ans = 0;",
			"        $1",
			"        return ans;",
			"    }",
			"};\n",
			"Solution sol;\n",
			"int main() {",
			"    vector<int> nums{1, 3, 1};",
			"    int res = sol.solve(nums);",
			"    cout << \"res : \" << res << endl;",
			"    return 0;",
			"}\n",
			"auto init = []() {",
			"    ios::sync_with_stdio(false);",
			"    cin.tie(nullptr);",
			"    cout.tie(nullptr);",
			"    return 'c';",
			"}();"
		],
		"description": "C++ coding template with utility functions and solution class"
	},
	"cppprintvector": {
        "prefix": "cppprintvector",
        "body": [
            "template <typename T>",
            "void printVector(const vector<T> &vect) {",
            "    for (const auto &element : vect) {",
            "        cout << element << \" \";",
            "    }",
            "    cout << endl;",
            "}"
        ],
        "description": "C++ function to print a vector"
    }
}